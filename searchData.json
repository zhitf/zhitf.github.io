[{"title":"Hexo+Github Pages详细教程","url":"/2019/03/01/hexo_github/","content":"# 为什么选择hexo?\nHexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒之内，即可利用靓丽的主题生成静态网页。\n很久之前就知道有这个博客框架，一直没有去体验过。而且，这个博客是不需要自己去购置服务器的，甚至域名都不用去买。\n\n# 搭建环境准备\n## Node.js 的安装和准备\nNode.js的官网是在国外的，下载的服务可能不太友好，可以去国内的Nodejs中文网去下载，选择适合自己的版本安装就可以了。安装界面也是下一步下一步就可以了。  \n网址：http://nodejs.cn/download/\n\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-144741%402x.png)\n\n\n检验是否安装成功:  \n```shell\nnode -v  \nnpm -v  \n```\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-144826%402x.png)\n\n显示版本号，没有报错就算装成功了。  \n## git的安装\ngit是一个版本控制管理工具，这个主要是在Hexo发布的时候起作用。将本地的博客同步到GitHub上面。\n选择合适的版本安装。  \n网址：https://git-scm.com/downloads \n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/20190206115834.png) \n\n检验是否安装成功：  \n```shell \ngit --version\n```\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-144907%402x.png) \n# 博客本地搭建\n## 安装Hexo\n通过npm来安装Hexo  \n```shell \nnpm install -g hexo-cli\n```\n## 创建网站  \n在电脑里新建一个文件夹作为博客的目录，通过Hexo命令初始化并安装。\n```shell\nhexo init <folder>\ncd <folder>\nnpm install\n```\n例如这里我将博客目录设置为hexoblog\n```shell\nhexo init hexoblog\ncd hexoblog\nnpm install # 这一步也可以不执行，init操作时已经安装了\n```\n\n## 网站目录介绍\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-145041%402x.png) \n<font color=#FF6347>config.yml</font>  \n博客的配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面。  \n<font color=#FF6347>package.json </font>   \n应用程序信息，新添加的插件内容也会出现在这里面，我们可以不修改这里的内容。  \n<font color=#FF6347>scaffolds  </font>  \nscaffolds就是脚手架的意思，这里放了三个模板文件，分别是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。\n这部分可以修改的内容是，我们可以在模板上添加比如categories等自定义内容  \n<font color=#FF6347>source </font>   \nsource是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相应地增加文件夹。  \n<font color=#FF6347>themes </font>   \n放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。\n初始状态下只有landscape一个文件夹，后续我们可以添加自己喜欢的。\n## Hexo命令\nHexo有详尽的中文文档，网址：https://hexo.io/zh-cn/docs/\n主要的命令如下：  \n<font color=#FF6347>init </font>新建一个网站\n```shell\nhexo init <folder>\n```\n<font color=#FF6347>new </font>新建文章或页面\n```shell\nhexo new <layout> \"title\"\n```\n这里的对应我们要添加的内容，如果是posts就是添加新的文章，如果是page就是添加新的页面。  \n默认是添加posts。  \n然后我们就可以在对应的posts或drafts文件夹里找到我们新建的文件，然后在文件里用Markdown的格式来写作了。  \n<font color=#FF6347>generate </font>生成静态页面\n```shell\nhexo generate\nhexo g  // 简写\n```\n<font color=#FF6347>deploy </font>将内容部署到网站\n```shell\nhexo deploy\nhexo -d  // 简写\n```\n<font color=#FF6347>publish </font>发布内容，实际上是将内容从drafts（草稿）文件夹移到posts（文章）文件夹。\n```shell\nhexo publish <layout> <filename>\n```\n<font color=#FF6347>server </font>启动服务器，默认情况下，访问网站为http://localhost:4000/\n```shell\nhexo server\nhexo s  // 简写\n```\n> 除了第一次部署的时候，我们会重点用到hexo init这个命令外，在平时写博客和发布过程中最常用的就是：\n\n```shell\nhexo n //新建文章\nhexo s //启动服务器，在本地查看内容\nhexo g //生成静态页面\nhexo deploy //部署到网站\n```\n以上四个步骤。\n\n```shell\nhexo new xxx    // 新建文章\nhexo g && hexo deploy  // 生成并部署\n```\n## 网站本地效果\n终端执行\n```shell\nhexo s\n```\n网站就在本地启动了，访问 http://localhost:4000\n\n\n\n# 博客Github部署\n## 创建储存桶\n新建一个仓库，项目名一定要是用户名.github.io的形式(README.md可选可不选)\n比如，我的用户名是zhitf，则我的仓库名必须是<font color=#FF6347>zhitf.github.io</font>\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-152721%402x.png) \n## 配置SSH-Key\n没有SSH-Key的话，git是不能将本地的代码部署到GitHub的。所以需要先创建SSH-Key。\n本地生成秘钥：这里的用户名和邮箱仅做演示，根据自己的修改\n```shell\ngit config --global user.name \"liunian\"\ngit config --global user.email liunian@zhitf.com\nssh-keygen -t rsa -C \" liunian@zhitf.com\"\n```\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-152622%402x.png) \n此时在用户文件夹下有一个隐藏文件夹，里面会有相关的秘钥文件。\n以文本方式打开<font color=#FF6347>id_rsa.pub</font>文件，将内容复制到GitHub。\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-152502%402x.png) \n标题随便起，将文本内容复制到Key，最后添加Key\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/20190206133454.png) \n\n## 同步代码\n使用hexo deploy部署需要安装一个插件：\n```shell\nnpm install hexo-deployer-git --save\n```\n找到blog目录下的配置文件<font color=#FF6347>_config.yml</font>,用编辑器打开此文件找到此文件中的<font color=#FF6347>deploy</font>字段，按照以下配置deploy:  \n```javascript\ntype: git   \nrepo: git@github.com:liunian/liunian.github.io.git   \nbranch: master  \n```\nrepo在GitHub获取：\n![nodejs](\thttps://liunian-1255701990.cos.ap-shanghai.myqcloud.com/hexoimg/WX20190322-152834%402x.png) \n然后在命令行中执行\n```shell\nhexo d\n```\n此时已经同步代码到GitHub了\n## 开启Github-Pages\n当你按照项目名是用户名.github.io的形式创建仓库的时候，GitHub应该是默认开启了github-pages。\n进入仓库的设置，往下拉：\n\n此时打开网址就可以看到Hexo博客了。\n\n# 域名解析\n* 注册域名\n* 域名绑定\n* 进入public,新建CNAME\n* 把域名写到CNAME里\n* 传到github仓库里  \n>注意域名解析的时候选择CNAME,主机记录可以按照下面的方式填写。\n比如我想用二级域名，我就填写blog。\n此时blog.zhitf.com就可以解析到我的Hexo博客。  \n主机记录就是域名前缀，常见用法有：\nwww：解析后的域名为www.aliyun.com。\n@：直接解析主域名 aliyun.com。\n：泛解析，匹配其他所有域名 .aliyun.com。\nmail：将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。\n二级域名：如：abc.aliyun.com，填写abc。\n手机网站：如：m.aliyun.com，填写m。\n显性URL：不支持泛解析（泛解析：将所有子域名解析到同一地址）  \n\n在博客的页面添加CNAME文件，并在里面记录自己域名的地址，将这个文件放在public文件夹下。这里还有一个小坑，CNAME文件经常被覆盖，导致我们重新部署博客后，链接就不可用了，可以将CNAME文件放在source文件夹下，这样就不会覆盖了\n# 配置主题\n下载\n在hexo目录下执行\n```shell\ngit clone https://github.com/GeekMubai/hexo-casper.git themes/hexo-casper\n```\n激活\n把hexo配置文件 <font color=#FF6347>_config.yml </font>里的 <font color=#FF6347>theme </font> 字段内容改为 <font color=#FF6347>hexo-casper  </font>。\n升级\n建议先备份一下在执行下面的操作\n```shell\ncd themes/casper \ngit pull\n```\n添加统一的文章模板参数\n把下面的内容加入到 <font color=#FF6347>scaffolds/post.md</font>,  \n```\ncover_img:     # 在文章摘要上显示\nfeature_img:   # 在文章详细页面上置顶\ndescription:   # 文章描述\nkeywords:      # 关键字\n```\n## valine 评论系统\n使用方法请到他的官网查看，并结合下面的配置文件详细添加appID和appKey\nhttps://valine.js.org/\n\n添加关于页面\n```shell\nhexo new page about\n```"}]